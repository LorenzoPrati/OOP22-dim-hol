package dimhol.logic.player;

import dimhol.input.Input;
import dimhol.entity.Entity;

import java.util.List;
import java.util.Optional;

/**
 * Represents a state the player can be in.
 */
public interface PlayerState {

    /**
     * Handles the operations that need to be done when entering the state.
     *
     * @param entity the entity representing the player
     */
    void entry(Entity entity);

    /**
     *
     * Updates the state by delta time and by renewing reference to
     * the entity representing the player and its components.
     *
     * @param deltaTime the delta time
     * @param entity the entity representing the player
     */
    void update(double deltaTime, Entity entity);

    /**
     * Checks if the current state can change.
     *
     * @return true if the current state can change, false if the state is
     * blocked executing a blocking animation
     */
    boolean canTransition();

    /**
     * Gets the new state resulting from a transition.
     *
     * @param input the user input
     * @return an optional containing the new state to assign to the player,
     * an empty optional if the state does not need to change
     */
    Optional<PlayerState> transition(Input input);

    /**
     * Executes the state specific task.
     *
     * @param input the user input
     * @return a list containing the entities generated by the execution
     */
    List<Entity> execute(Input input);

    /**
     * Handles the operations that need to be done when exiting from the state.
     */
    void exit();

    /**
     * Updates the animation.
     */
    void updateAnimation();
}
